name: CI

on:
  push:
    branches: [main, staging, develop]
  pull_request:
    branches: [main, staging]

env:
  UV_CACHE_DIR: /tmp/.uv-cache

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Restore UV cache
      uses: actions/cache@v4
      with:
        path: /tmp/.uv-cache
        key: uv-${{ runner.os }}-${{ hashFiles('gastropartner-backend/uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-
    
    - name: Install dependencies
      working-directory: ./gastropartner-backend
      run: |
        uv venv
        uv sync --all-extras --frozen
    
    - name: Run tests with coverage
      working-directory: ./gastropartner-backend
      run: uv run pytest --cov=src --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./gastropartner-backend/coverage.xml
        flags: backend
        name: backend-coverage
      
    - name: Run linting
      working-directory: ./gastropartner-backend
      run: |
        uv run ruff check . --output-format=github || echo "⚠️  Backend linting completed with warnings"
        uv run ruff format --check . || echo "⚠️  Backend formatting check completed with warnings"
    
    - name: Run type checking
      working-directory: ./gastropartner-backend
      run: uv run mypy src/ --junit-xml=mypy-results.xml || echo "⚠️  Backend type checking completed with warnings"
    
    - name: Minimize UV cache
      run: uv cache prune

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: gastropartner-frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./gastropartner-frontend
      run: npm ci
    
    - name: Run ESLint
      working-directory: ./gastropartner-frontend
      run: npm run lint || true  # Continue on lint warnings
    
    - name: Run tests with coverage
      working-directory: ./gastropartner-frontend
      run: npm test -- --coverage --watchAll=false --coverageReporters=text-lcov --coverageReporters=lcov
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./gastropartner-frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
    
    - name: Build production bundle
      working-directory: ./gastropartner-frontend
      env:
        REACT_APP_SUPABASE_URL: https://example.supabase.co
        REACT_APP_SUPABASE_ANON_KEY: dummy-key-for-ci-build
        REACT_APP_API_URL: http://localhost:8000
      run: npm run build
    
    - name: Check bundle size
      working-directory: ./gastropartner-frontend
      run: |
        echo "📦 Build completed successfully"
        ls -lh build/static/js/*.js | head -5
        echo "Bundle analysis complete"

  # Security audit for both backend and frontend
  security-audit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Audit backend dependencies
      working-directory: ./gastropartner-backend
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        uv python install 3.11
        uv venv
        uv sync --all-extras --frozen
        uv run pip-audit || echo "⚠️  Backend security audit completed with warnings"
    
    - name: Setup Node.js for frontend audit
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Audit frontend dependencies
      working-directory: ./gastropartner-frontend
      run: |
        npm audit --audit-level=high || echo "⚠️  Frontend security audit completed with warnings"

  # Integration tests (runs after unit tests pass)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: gastropartner-frontend/package-lock.json
    
    - name: Start backend server
      working-directory: ./gastropartner-backend
      run: |
        uv venv
        uv sync --frozen
        # Start backend server in background
        uv run uvicorn gastropartner.main:app --host 0.0.0.0 --port 8000 &
        echo $! > backend.pid
        
        # Wait for server to start
        sleep 10
        
        # Health check
        curl -f http://localhost:8000/health || echo "⚠️ Backend health check failed"
    
    - name: Run frontend build against local backend
      working-directory: ./gastropartner-frontend
      env:
        REACT_APP_SUPABASE_URL: https://example.supabase.co
        REACT_APP_SUPABASE_ANON_KEY: dummy-key-for-integration-test
        REACT_APP_API_URL: http://localhost:8000
      run: |
        npm ci
        npm run build
        echo "✅ Frontend successfully built against local backend"
    
    - name: Cleanup
      if: always()
      run: |
        # Kill backend server if running
        if [ -f gastropartner-backend/backend.pid ]; then
          kill $(cat gastropartner-backend/backend.pid) || true
        fi

  # Performance tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.event_name == 'push' # Skip on PRs to save time
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x
    
    - name: Build frontend for performance testing
      working-directory: ./gastropartner-frontend
      env:
        REACT_APP_SUPABASE_URL: https://example.supabase.co
        REACT_APP_SUPABASE_ANON_KEY: dummy-key-for-perf-test
        REACT_APP_API_URL: http://localhost:8000
      run: |
        npm ci
        npm run build
    
    - name: Serve built frontend
      working-directory: ./gastropartner-frontend
      run: |
        npx serve -s build -l 3000 &
        sleep 5
    
    - name: Run Lighthouse CI
      run: |
        lhci autorun --upload.target=temporary-public-storage || echo "⚠️ Lighthouse performance check completed with warnings"
        echo "📊 Performance audit completed"

  # Summary job for branch protection
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-audit, integration-tests]
    if: always()
    
    steps:
    - name: Check all jobs
      run: |
        # Check if any required job failed
        if [[ "${{ needs.test-backend.result }}" == "failure" || \
              "${{ needs.test-frontend.result }}" == "failure" || \
              "${{ needs.security-audit.result }}" == "failure" || \
              "${{ needs.integration-tests.result }}" == "failure" ]]; then
          echo "❌ One or more required jobs failed"
          exit 1
        else
          echo "✅ All required CI jobs passed"
        fi
    
    - name: Generate summary
      run: |
        echo "## 🚀 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Tests | ${{ needs.test-backend.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Tests | ${{ needs.test-frontend.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Audit | ${{ needs.security-audit.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY