name: E2E Tests

on:
  pull_request:
    branches: [main, staging]
    paths:
      - 'gastropartner-frontend/**'
      - 'gastropartner-backend/**'
      - '.github/workflows/**'

env:
  UV_CACHE_DIR: /tmp/.uv-cache

jobs:
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: gastropartner-frontend/package-lock.json
    
    - name: Install backend dependencies
      working-directory: ./gastropartner-backend
      run: |
        uv venv
        uv sync --frozen
    
    - name: Install frontend dependencies
      working-directory: ./gastropartner-frontend
      run: npm ci
    
    - name: Install Playwright browsers
      working-directory: ./gastropartner-frontend
      run: npx playwright install --with-deps
    
    - name: Start backend server
      working-directory: ./gastropartner-backend
      run: |
        # Start backend in background
        uv run uvicorn gastropartner.main:app --host 0.0.0.0 --port 8000 &
        echo $! > backend.pid
        
        # Wait for server to be ready
        timeout 30 bash -c 'until curl -f http://localhost:8000/health; do sleep 1; done'
        echo "✅ Backend server is ready"
    
    - name: Build frontend
      working-directory: ./gastropartner-frontend
      env:
        REACT_APP_SUPABASE_URL: https://example.supabase.co
        REACT_APP_SUPABASE_ANON_KEY: dummy-key-for-e2e-test
        REACT_APP_API_URL: http://localhost:8000
      run: npm run build
    
    - name: Start frontend server
      working-directory: ./gastropartner-frontend
      run: |
        # Serve built frontend
        npx serve -s build -l 3000 &
        echo $! > frontend.pid
        
        # Wait for frontend to be ready
        timeout 30 bash -c 'until curl -f http://localhost:3000; do sleep 1; done'
        echo "✅ Frontend server is ready"
    
    - name: Run E2E tests
      working-directory: ./gastropartner-frontend
      env:
        PLAYWRIGHT_BASE_URL: http://localhost:3000
      run: |
        npx playwright test --reporter=html,junit,line
        echo "📊 E2E test results generated"
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: |
          gastropartner-frontend/gastropartner-test-suite/reports/
          gastropartner-frontend/test-results/
        retention-days: 7
    
    - name: Upload Playwright HTML Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: gastropartner-frontend/gastropartner-test-suite/reports/playwright-report/
        retention-days: 7
    
    - name: Comment PR with test results
      uses: actions/github-script@v7
      if: always() && github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Try to read test results
          let testSummary = '📊 E2E test results will be available in artifacts.';
          
          try {
            const resultsPath = path.join(process.cwd(), 'gastropartner-frontend/gastropartner-test-suite/reports/test-results.json');
            if (fs.existsSync(resultsPath)) {
              const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
              const { stats } = results;
              
              testSummary = `## 🧪 E2E Test Results
              
              - **Total tests:** ${stats.expected + stats.unexpected + stats.skipped}
              - **Passed:** ${stats.expected} ✅
              - **Failed:** ${stats.unexpected} ❌
              - **Skipped:** ${stats.skipped} ⏭️
              - **Duration:** ${(stats.duration / 1000).toFixed(2)}s
              
              ${stats.unexpected > 0 ? '⚠️ Some tests failed. Check the artifacts for detailed reports.' : '🎉 All tests passed!'}`;
            }
          } catch (error) {
            console.log('Could not read test results:', error.message);
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: testSummary
          });
    
    - name: Cleanup servers
      if: always()
      run: |
        # Kill servers if running
        if [ -f gastropartner-backend/backend.pid ]; then
          kill $(cat gastropartner-backend/backend.pid) || true
        fi
        if [ -f gastropartner-frontend/frontend.pid ]; then
          kill $(cat gastropartner-frontend/frontend.pid) || true
        fi
        
        # Kill any remaining processes
        pkill -f "uvicorn gastropartner.main:app" || true
        pkill -f "serve -s build" || true
        
        echo "✅ Cleanup completed"