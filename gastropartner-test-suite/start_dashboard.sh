#!/bin/bash
"""
GastroPartner Test Dashboard Starter
Startar b√•de API server och nginx dashboard
"""

set -e

echo "üöÄ Startar GastroPartner Test Dashboard..."

# Kontrollera Python dependencies
echo "üì¶ Kontrollerar Python dependencies..."
if ! pip show flask > /dev/null 2>&1; then
    echo "Installing Python dependencies..."
    pip install -r requirements.txt
fi

# Kontrollera Playwright browsers
echo "üåê Kontrollerar Playwright browsers..."
if [ ! -d ~/.cache/ms-playwright ]; then
    echo "Installerar Playwright browsers..."
    playwright install
fi

# Starta API server i bakgrunden
echo "‚ö° Startar Test API Server..."
python test_api_server.py &
API_PID=$!

# V√§nta lite f√∂r att API ska starta
sleep 3

# Kontrollera att API server √§r ig√•ng
if ! curl -s http://localhost:5001/health > /dev/null; then
    echo "‚ùå API server startade inte korrekt"
    kill $API_PID 2>/dev/null || true
    exit 1
fi

echo "‚úÖ API Server ig√•ng p√• port 5001"

# Starta nginx/dashboard
echo "üìä Startar Dashboard..."
if command -v docker-compose > /dev/null; then
    docker-compose up -d dashboard
elif command -v docker > /dev/null && [ -f docker-compose.yml ]; then
    docker compose up -d dashboard
else
    # Fallback: starta en enkel HTTP server f√∂r dashboarden
    echo "üìÇ Startar enkel HTTP server f√∂r dashboard..."
    cd dashboard
    python -m http.server 8080 &
    HTTP_PID=$!
    cd ..
    echo "‚úÖ Dashboard tillg√§nglig p√• http://localhost:8080"
fi

echo ""
echo "üéâ GastroPartner Test Dashboard √§r nu ig√•ng!"
echo ""
echo "üìä Dashboard: http://localhost:8080"
echo "‚ö° API Server: http://localhost:5001"
echo "üìà Health Check: http://localhost:5001/health"
echo ""
echo "Tryck Ctrl+C f√∂r att stoppa..."

# V√§nta p√• interrupt signal
trap 'echo "üõë St√§nger ned..."; kill $API_PID 2>/dev/null || true; kill $HTTP_PID 2>/dev/null || true; docker-compose down 2>/dev/null || true; exit 0' INT

# H√•ll scriptet ig√•ng
wait