#!/usr/bin/env python3
"""
Test f√∂r Archon integration
Testar att critical bug task creation fungerar
"""

import json
import requests
from pathlib import Path

def test_archon_api_endpoint():
    """Testar API endpoint f√∂r Archon task creation"""
    api_url = 'http://localhost:5001/api/archon/tasks'
    
    # Simulera en misslyckad test fr√•n test suite
    test_data = {
        'action': 'create',
        'project_id': 'e1e5d90c-616d-4c46-86d2-a77dd121a197',
        'title': 'CRITICAL BUG: Ingredients - Login failed with valid credentials',
        'description': '''## üö® Critical Bug Report fr√•n Automatiska Tester

### Problembeskrivning
Login failed with valid credentials. Expected to be redirected to dashboard but remained on login page.

### √Öterskapa Problemet
1. Navigera till ingredienssidan
2. G√• till ingredienssidan och f√∂rs√∂k l√§gga till/redigera ingrediens
3. Utf√∂r handlingen: Click login button
4. Observera fel: Login failed with valid credentials

### Tekniska Detaljer
- **Testmodul**: ingredients
- **Testnamn**: test_add_ingredient
- **Milj√∂**: local
- **Webbl√§sare**: chromium
- **Tidsst√§mpel**: 2025-08-15T19:52:00.000Z
- **Session ID**: test_session_123

### Prioritet
üî¥ **CRITICAL** - Detta fel uppt√§cktes av automatiska tester och beh√∂ver √•tg√§rdas omedelbart.

### Acceptanskriterier
- [ ] Felet √§r identifierat och rotorsaken fastst√§lld
- [ ] Korrekt l√∂sning implementerad
- [ ] Manuella tester bekr√§ftar att problemet √§r l√∂st
- [ ] Automatiska tester passerar utan fel
- [ ] Ingen regression introducerats
''',
        'assignee': 'AI IDE Agent',
        'task_order': 100,
        'feature': 'critical-bug-fix',
        'sources': [
            {
                'url': 'test-report.html',
                'type': 'test_report',
                'relevance': 'Fullst√§ndig testrapport med alla detaljer'
            }
        ],
        'code_examples': [
            {
                'file': 'tests/e2e/ingredients_test.py',
                'function': 'test_add_ingredient',
                'purpose': 'Test som misslyckades och uppt√§ckte buggen'
            }
        ]
    }
    
    try:
        print("Testar Archon API endpoint...")
        response = requests.post(api_url, json=test_data, timeout=10)
        
        print(f"Status code: {response.status_code}")
        print(f"Response: {response.text}")
        
        if response.status_code == 200:
            result = response.json()
            if result.get('success'):
                print("‚úÖ Test FRAMG√ÖNGSRIK - Critical bug task skapad!")
                print(f"Task ID: {result['task']['id']}")
                print(f"Task title: {result['task']['title']}")
                return True
            else:
                print(f"‚ùå API returnerade fel: {result.get('error')}")
                return False
        else:
            print(f"‚ùå HTTP fel: {response.status_code}")
            return False
            
    except requests.exceptions.ConnectionError:
        print("‚ùå Kunde inte ansluta till API servern. √Ñr den ig√•ng p√• port 5001?")
        return False
    except Exception as e:
        print(f"‚ùå Ov√§ntat fel: {e}")
        return False

def check_static_files():
    """Kontrollera att statiska filer existerar"""
    static_dir = Path(__file__).parent / 'static'
    archon_js = static_dir / 'archon-integration.js'
    
    if archon_js.exists():
        print("‚úÖ Archon integration JavaScript fil existerar")
        return True
    else:
        print("‚ùå Archon integration JavaScript fil saknas")
        return False

def main():
    """K√∂r alla tester"""
    print("üß™ Testar Archon integration f√∂r critical bug tasks\n")
    
    # Test 1: Kontrollera statiska filer
    print("Test 1: Kontrollerar statiska filer...")
    static_ok = check_static_files()
    print()
    
    # Test 2: Testa API endpoint
    print("Test 2: Testar API endpoint...")
    api_ok = test_archon_api_endpoint()
    print()
    
    # Resultat
    if static_ok and api_ok:
        print("üéâ Alla tester PASSERADE! Archon integration √§r redo att anv√§ndas.")
        print("\nN√§sta steg:")
        print("1. Starta test API servern: python test_api_server.py")
        print("2. K√∂r tester f√∂r att generera testrapporter")
        print("3. √ñppna testrapporten och klicka p√• 'Skapa Critical Bug Task' f√∂r misslyckade tester")
        return True
    else:
        print("‚ùå N√•gra tester MISSLYCKADES. Se ovanst√•ende meddelanden f√∂r detaljer.")
        return False

if __name__ == '__main__':
    main()