services:
  # Huvudtestcontainer
  test-runner:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: gastropartner-test-runner
    network_mode: "host"
    environment:
      # Test konfiguration
      - TEST_ENV=${TEST_ENV:-local}
      - HEADLESS=${HEADLESS:-true}
      - PARALLEL_TESTS=${PARALLEL_TESTS:-4}
      - TEST_TIMEOUT=${TEST_TIMEOUT:-30000}
      
      # Browser inställningar
      - BROWSER=${BROWSER:-chromium}
      - VIEWPORT_WIDTH=${VIEWPORT_WIDTH:-1920}
      - VIEWPORT_HEIGHT=${VIEWPORT_HEIGHT:-1080}
      
      # Rapportering
      - GENERATE_REPORT=${GENERATE_REPORT:-true}
      - TAKE_SCREENSHOTS=${TAKE_SCREENSHOTS:-true}
      - RECORD_VIDEO=${RECORD_VIDEO:-false}
      
      # Slack notifieringar (valfritt)
      - SLACK_WEBHOOK=${SLACK_WEBHOOK:-}
      
      # Debug
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      
    volumes:
      # Spara rapporter och screenshots på host
      - ./reports:/app/reports
      - ./screenshots:/app/screenshots
      - ./logs:/app/logs
      
      # Konfigurations-overrides
      - ./config:/app/config
      
      # För development: live kod ändringar
      - ./tests:/app/tests
      - ./monitoring:/app/monitoring
      
    # Inte interactive mode som default
    stdin_open: false
    tty: false
    
    # Restart policy
    restart: "no"
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Test database (för direkta datavalideringar)
  test-db:
    image: postgres:15
    container_name: gastropartner-test-db
    environment:
      - POSTGRES_DB=gastropartner_test
      - POSTGRES_USER=test_user
      - POSTGRES_PASSWORD=test_password
    volumes:
      - test_db_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"  # Undvik konflikt med local postgres
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d gastropartner_test"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Performance monitoring (disabled for now - will be built when needed)
  # test-monitor:
  #   build:
  #     context: ./monitoring
  #     dockerfile: Dockerfile
  #   container_name: gastropartner-test-monitor
  #   environment:
  #     - MONITOR_INTERVAL=${MONITOR_INTERVAL:-300}  # 5 minuter
  #     - TARGET_ENV=${TEST_ENV:-local}
  #   volumes:
  #     - ./reports:/app/reports
  #     - ./config:/app/config
  #   networks:
  #     - test-network
  #   depends_on:
  #     - test-runner

  # Test API Server
  test-api:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: gastropartner-test-api
    command: python3 test_api_server.py
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=false
    volumes:
      - ./reports:/app/reports
      - ./screenshots:/app/screenshots
      - ./logs:/app/logs
      - ./config:/app/config
      - ./tests:/app/tests
    ports:
      - "5001:5001"
    networks:
      - test-network
    restart: unless-stopped

  # Web dashboard för testresultat
  test-dashboard:
    image: nginx:alpine
    container_name: gastropartner-test-dashboard
    volumes:
      - ./reports:/usr/share/nginx/html/reports:ro
      - ./screenshots:/usr/share/nginx/html/screenshots:ro
      - ./dashboard/index.html:/usr/share/nginx/html/index.html:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      # Remove default nginx config
      - /dev/null:/etc/nginx/conf.d/default.conf
    ports:
      - "8081:80"
    networks:
      - test-network
    depends_on:
      - test-api

networks:
  test-network:
    driver: bridge
    name: gastropartner-test-network

volumes:
  test_db_data:
    name: gastropartner-test-db-data

# Kommandon för olika användningsfall:
# docker-compose up --build                     # Bygg och kör alla tester + dashboard + monitoring
# docker-compose run test-runner                # Kör tester interaktivt
# 
# Tillgängliga services efter start:
# - Test Dashboard: http://localhost:8081       # Web UI för testrapporter
# - Test Database: localhost:5433               # Postgres för datavalidering
# - Monitoring: Automatisk performance övervakning