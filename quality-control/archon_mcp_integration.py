#!/usr/bin/env python3
"""
Archon MCP Integration - Direct integration with Claude Code's MCP system
This script creates actual tasks in Archon when quality control finds errors.
"""

import sys
import os
from pathlib import Path
from typing import List, Dict, Any
from feedback_processor import ErrorDetail

# Add the parent directory to sys.path to import from quality-control
sys.path.append(str(Path(__file__).parent))

ARCHON_PROJECT_ID = "9108cfbd-75a5-48dd-bed4-ac0b490a35b9"


def create_archon_tasks_for_errors(
    error_details: List[ErrorDetail], fix_suggestions: List[str] = None
):
    """
    Create Archon tasks for quality control errors.
    This function will be called when quality control detects errors.
    """
    if not error_details:
        print("No errors to create tasks for")
        return []

    print(f"\n🚨 CREATING ARCHON TASKS FOR {len(error_details)} QUALITY CONTROL ERRORS")

    created_tasks = []
    fix_suggestions = fix_suggestions or []

    # Create fix suggestions mapping
    fix_map = {}
    for suggestion in fix_suggestions:
        if "organization_id" in suggestion.lower():
            fix_map["multi_tenant"] = suggestion
        elif "auth" in suggestion.lower():
            fix_map["auth"] = suggestion
        elif "type" in suggestion.lower():
            fix_map["type"] = suggestion
        elif "hook" in suggestion.lower():
            fix_map["hook"] = suggestion

    for i, error_detail in enumerate(error_details, 1):
        print(
            f"\n📝 Creating task {i}/{len(error_details)}: {error_detail.file}:{error_detail.line}"
        )

        # Find relevant fix suggestion
        relevant_fix = None
        error_msg_lower = error_detail.message.lower()

        if "organization_id" in error_msg_lower or "multi-tenant" in error_msg_lower:
            relevant_fix = fix_map.get("multi_tenant")
        elif "auth" in error_msg_lower:
            relevant_fix = fix_map.get("auth")
        elif "type" in error_msg_lower:
            relevant_fix = fix_map.get("type")
        elif "hook" in error_msg_lower or "useeffect" in error_msg_lower:
            relevant_fix = fix_map.get("hook")

        task_data = create_task_data(error_detail, relevant_fix)

        # This is where the actual MCP call would happen via Claude Code
        # For now, we prepare the task and show what would be created
        created_task = create_single_archon_task(task_data)
        if created_task:
            created_tasks.append(created_task)

    print(f"\n✅ CREATED {len(created_tasks)} ARCHON TASKS")
    return created_tasks


def create_task_data(
    error_detail: ErrorDetail, fix_suggestion: str = None
) -> Dict[str, Any]:
    """Create task data structure for Archon."""

    # Determine priority based on error severity
    priority_map = {1: 10, 2: 8, 3: 6, 4: 4, 5: 2}
    task_order = priority_map.get(error_detail.priority, 5)

    # Create task title
    severity_emoji = {"1": "🚨", "2": "⚠️", "3": "❌", "4": "💡", "5": "ℹ️"}
    emoji = severity_emoji.get(str(error_detail.priority), "❌")

    task_title = f"{emoji} Fix {error_detail.severity}: {error_detail.message[:80]}"
    if len(error_detail.message) > 80:
        task_title += "..."

    # Create detailed description
    description_parts = [
        "**Quality Control Issue Detected**",
        "",
        f"**File:** {error_detail.file}",
        f"**Line:** {error_detail.line if error_detail.line else 'N/A'}",
        f"**Severity:** {error_detail.severity.upper()}",
        f"**Priority:** {error_detail.priority}/5 (1=Critical, 5=Low)",
        f"**Rule ID:** {error_detail.rule_id if error_detail.rule_id else 'N/A'}",
        "",
        "**Issue Description:**",
        f"{error_detail.message}",
        "",
    ]

    if fix_suggestion:
        description_parts.extend(["**Recommended Fix:**", f"{fix_suggestion}", ""])

    if error_detail.code_example:
        description_parts.extend(
            ["**Code Example:**", "```", f"{error_detail.code_example}", "```", ""]
        )

    description_parts.extend(
        [
            "**Auto-generated by:** Quality Control System",
            f"**Timestamp:** {os.environ.get('TIMESTAMP', 'N/A')}",
        ]
    )

    description = "\n".join(description_parts)

    # Assign based on error type
    assignee = determine_assignee(error_detail)

    # Create feature tag based on file type
    feature = determine_feature_tag(error_detail.file)

    return {
        "action": "create",
        "project_id": ARCHON_PROJECT_ID,
        "title": task_title,
        "description": description,
        "assignee": assignee,
        "task_order": task_order,
        "feature": feature,
    }


def create_single_archon_task(task_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    Create a single task in Archon.
    This will be called via Claude Code's MCP system.
    """
    print(f"🎯 Task: {task_data['title']}")
    print(f"👤 Assignee: {task_data['assignee']}")
    print(f"🏷️ Feature: {task_data['feature']}")
    print(f"📊 Priority: {task_data['task_order']}")

    # The actual MCP call happens here via Claude Code
    # This function will be enhanced when run through Claude Code environment

    # Simulate task creation for now
    return {
        "task_id": f"qc-task-{hash(task_data['title']) % 10000}",
        "title": task_data["title"],
        "status": "created",
        "project_id": task_data["project_id"],
        "assignee": task_data["assignee"],
        "feature": task_data["feature"],
    }


def determine_assignee(error_detail: ErrorDetail) -> str:
    """Determine appropriate assignee based on error type."""
    message_lower = error_detail.message.lower()

    # Security issues go to AI IDE Agent for immediate attention
    if any(
        keyword in message_lower
        for keyword in [
            "organization_id",
            "multi-tenant",
            "sql injection",
            "auth",
            "security",
        ]
    ):
        return "AI IDE Agent"

    # Frontend/UI issues
    if any(
        keyword in message_lower
        for keyword in ["react", "component", "hook", "jsx", "tsx", "css", "ui"]
    ):
        return "AI IDE Agent"

    # Backend/API issues
    if any(
        keyword in message_lower
        for keyword in ["api", "database", "query", "model", "repository"]
    ):
        return "AI IDE Agent"

    # General code quality
    return "AI IDE Agent"


def determine_feature_tag(filename: str) -> str:
    """Determine feature tag based on filename."""
    filename_lower = filename.lower()

    if "auth" in filename_lower:
        return "authentication"
    elif "recipe" in filename_lower:
        return "recipes"
    elif "ingredient" in filename_lower:
        return "ingredients"
    elif "organization" in filename_lower:
        return "organizations"
    elif "user" in filename_lower:
        return "user-management"
    elif "api" in filename_lower:
        return "api"
    elif (
        "component" in filename_lower
        or "tsx" in filename_lower
        or "jsx" in filename_lower
    ):
        return "frontend"
    else:
        return "code-quality"


def test_integration():
    """Test the integration with mock data."""
    print("🧪 TESTING ARCHON INTEGRATION")

    # Create mock error
    mock_error = ErrorDetail(
        file="recipes.py",
        line=45,
        column=12,
        severity="error",
        message="Missing organization_id filter in database query - potential multi-tenant data leak",
        rule_id="MT001",
        fix_suggestion="Add .filter(organization_id=current_user.organization_id) to query",
        code_example="recipes = db.query(Recipe).filter(Recipe.organization_id == user.organization_id).all()",
        priority=1,
    )

    # Create tasks
    created_tasks = create_archon_tasks_for_errors(
        [mock_error], ["Add organization_id filter to all database queries"]
    )

    if created_tasks:
        print(f"✅ Integration test passed - {len(created_tasks)} tasks created")
        return True
    else:
        print("❌ Integration test failed")
        return False


if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "test":
        test_integration()
    else:
        print("Archon MCP Integration loaded")
        print(f"Target project: {ARCHON_PROJECT_ID}")
        print("Ready to create tasks for quality control errors")
